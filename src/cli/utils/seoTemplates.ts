export type MetaTag = {
  name?: string;
  property?: string;
  content: string;
};

export type LinkTag = {
  rel: string;
  href: string;
};

export interface HeadDefaults {
  title: string;
  meta: MetaTag[];
  links: LinkTag[];
}

export const BASIC_PLACEHOLDERS = {
  title: 'Your Site Title',
  description: 'Update this meta description to highlight what this page offers.',
  language: 'en',
  robots: 'index,follow',
  ogType: 'website',
  twitterCard: 'summary_large_image',
  canonical: 'https://yourdomain.com/',
  imageAlt: 'Image description',
  h1: 'Website Title Here',
};

export const GEO_PLACEHOLDERS = {
  locale: 'en_US',
  ogLocaleAlt: 'es_US',
  geoRegion: 'US-CA',
  geoPosition: '0;0',
};

export function getBasicHeadDefaults(): HeadDefaults {
  const meta: MetaTag[] = [
    { name: 'description', content: BASIC_PLACEHOLDERS.description },
    { name: 'viewport', content: 'width=device-width, initial-scale=1' },
    { name: 'robots', content: BASIC_PLACEHOLDERS.robots },
    { property: 'og:type', content: BASIC_PLACEHOLDERS.ogType },
    { property: 'og:title', content: BASIC_PLACEHOLDERS.title },
    { property: 'og:description', content: BASIC_PLACEHOLDERS.description },
    { property: 'og:locale', content: GEO_PLACEHOLDERS.locale },
    { name: 'twitter:card', content: BASIC_PLACEHOLDERS.twitterCard },
    { name: 'twitter:title', content: BASIC_PLACEHOLDERS.title },
    { name: 'twitter:description', content: BASIC_PLACEHOLDERS.description },
  ];

  const links: LinkTag[] = [
    { rel: 'canonical', href: BASIC_PLACEHOLDERS.canonical },
  ];

  return {
    title: BASIC_PLACEHOLDERS.title,
    meta,
    links,
  };
}

export function getMinimalRobotsTxt(baseUrl = BASIC_PLACEHOLDERS.canonical): string {
  const normalised = baseUrl.endsWith('/') ? baseUrl.slice(0, -1) : baseUrl;
  const sitemapUrl = `${normalised}/sitemap.xml`;
  return [
    'User-agent: *',
    'Allow: /',
    '',
    `Sitemap: ${sitemapUrl}`,
  ].join('\n');
}

export function getMinimalSitemapXml(baseUrl = BASIC_PLACEHOLDERS.canonical): string {
  const normalised = baseUrl.endsWith('/') ? baseUrl : `${baseUrl}/`;
  return `<?xml version="1.0" encoding="UTF-8"?>\n<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">\n  <url>\n    <loc>${normalised}</loc>\n  </url>\n</urlset>`;
}

export function getMinimalLlmsTxt(): string {
  return [
    'This site is publicly accessible and safe for language models.',
    'Content is informational; attribute the owner when referencing material.',
    '# Generated by https://github.com/cliseo/cliseo',
  ].join('\n');
}

export function buildHeadTagStrings(defaults: HeadDefaults = getBasicHeadDefaults()): {
  title: string;
  meta: string[];
  links: string[];
} {
  const title = defaults.title;
  const meta = defaults.meta
    .map((entry) => {
      if (entry.name) {
        return `<meta name="${entry.name}" content="${entry.content}" />`;
      }
      if (entry.property) {
        return `<meta property="${entry.property}" content="${entry.content}" />`;
      }
      return '';
    })
    .filter(Boolean);

  const links = defaults.links.map((link) => `<link rel="${link.rel}" href="${link.href}" />`);

  return { title, meta, links };
}

export type TagPresence = {
  titles: boolean;
  metaNames: Set<string>;
  metaProperties: Set<string>;
  links: Set<string>;
};

export function collectTagPresence(tags: { name?: string | null; property?: string | null; rel?: string | null }[]): TagPresence {
  const presence: TagPresence = {
    titles: false,
    metaNames: new Set(),
    metaProperties: new Set(),
    links: new Set(),
  };

  for (const tag of tags) {
    if ('name' in tag && tag.name) {
      presence.metaNames.add(tag.name.toLowerCase());
    }
    if ('property' in tag && tag.property) {
      presence.metaProperties.add(tag.property.toLowerCase());
    }
    if ('rel' in tag && tag.rel) {
      presence.links.add(tag.rel.toLowerCase());
    }
  }

  return presence;
}

export function normaliseWhitespace(value: string): string {
  return value.replace(/\s+/g, ' ').trim();
}
